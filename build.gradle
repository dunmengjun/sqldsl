plugins {
    id 'java'
    id 'checkstyle'
    id "com.star-zero.gradle.githook" version "1.2.1"
    id "io.freefair.lombok" version "6.2.0"
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

group 'io.github.dunmengjun'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'sqldsl'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'sqldsl'
                packaging = 'jar'
                description = 'A sql dsl based on jdbc'
                url = 'https://github.com/dunmengjun/sqldsl'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/dunmengjun/sqldsl/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'dunmengjun'
                        name = 'Mengjun Dun'
                        email = 'a2091013@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/dunmengjun/sqldsl.git'
                    developerConnection = 'scm:git:https://github.com/dunmengjun/sqldsl.git'
                    url = 'https://github.com/dunmengjun/sqldsl'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("NEXUS_USERNAME")
                password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.source '1.8'
    options.addBooleanOption('Xdoclint:none', true)
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

sonarqube {
    properties {
        property "sonar.projectKey", "dunmengjun_sqldsl"
        property "sonar.organization", "dunmengjun"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**/exception/**"
    }
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/exception/**"
            ])
        }))
    }
}

dependencies {
    implementation 'javax.persistence:persistence-api:1.0.2'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'


    testImplementation 'ch.qos.logback:logback-core:1.2.6'
    testImplementation 'ch.qos.logback:logback-classic:1.2.6'

    testCompileOnly 'org.projectlombok:lombok:1.18.20'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testImplementation 'com.h2database:h2:1.4.200'
}

test {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '9.0'
}

githook {
    hooks {
        "pre-commit" {
            task = "check test"
            shell = "echo pre-commit done!"
        }
        "pre-push" {
            task = "check test"
            shell = "echo pre-push done!"
        }
    }
}