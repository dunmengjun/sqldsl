plugins {
    id 'java'
    id 'checkstyle'
    id "com.star-zero.gradle.githook" version "1.2.1"
    id "io.freefair.lombok" version "6.2.0"
    id 'maven-publish'
    id 'signing'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

group 'io.github.dunmengjun'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'sqldsl'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'sqldsl'
                packaging = 'jar'
                description = 'A sql dsl based on jdbc'
                url = 'https://github.com/dunmengjun/sqldsl'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/dunmengjun/sqldsl/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'dunmengjun'
                        name = 'Mengjun Dun'
                        email = 'a2091013@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/dunmengjun/sqldsl.git'
                    developerConnection = 'scm:git:https://github.com/dunmengjun/sqldsl.git'
                    url = 'https://github.com/dunmengjun/sqldsl'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("NEXUS_USERNAME")
                password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

signing {
    String signingKey = findProperty("signingKey")
    String signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.source '1.8'
    options.addBooleanOption('Xdoclint:none', true)
}

sourcesJar {
    exclude {
        sourceSets.main.allSource.contains it.file
    }
    from delombok
}

sonarqube {
    properties {
        property "sonar.projectKey", "dunmengjun_sqldsl"
        property "sonar.organization", "dunmengjun"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.exclusions", "**/exception/**"
        property "sonar.sources", "./src/main"
        property "sonar.tests", "./src/test,./src/integrationTest"
        property "sonar.junit.reportPaths",
                "$buildDir/test-results/test,$buildDir/test-results/integrationTest"
    }
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/exception/**"
            ])
        }))
    }
}

//integrationTest
sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

def testContainersVersion = '1.16.0'
def jupiterVersion = '5.8.1'
def lombokVersion = '1.18.20'
def logbackVersion = '1.2.6'

dependencies {
    implementation 'javax.persistence:persistence-api:1.0.2'
    implementation 'org.slf4j:slf4j-api:1.7.32'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"


    testImplementation "ch.qos.logback:logback-core:$logbackVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"

    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"

    testImplementation 'com.h2database:h2:1.4.200'

    //integrationTest deps
    integrationTestImplementation "org.testcontainers:junit-jupiter:$testContainersVersion"
    integrationTestImplementation "org.testcontainers:testcontainers:$testContainersVersion"

    integrationTestImplementation "org.testcontainers:mysql:$testContainersVersion"
    integrationTestImplementation "org.testcontainers:postgresql:$testContainersVersion"
    integrationTestImplementation "org.testcontainers:oracle-xe:$testContainersVersion"
    integrationTestImplementation "org.testcontainers:mssqlserver:$testContainersVersion"

    integrationTestImplementation "mysql:mysql-connector-java:8.0.26"
    integrationTestImplementation "com.oracle.database.jdbc:ojdbc8:21.1.0.0"
    integrationTestImplementation "com.microsoft.sqlserver:mssql-jdbc:9.4.0.jre8"


    integrationTestImplementation "ch.qos.logback:logback-core:$logbackVersion"
    integrationTestImplementation "ch.qos.logback:logback-classic:$logbackVersion"

    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:$jupiterVersion"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-params:$jupiterVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiterVersion"


}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

integrationTest {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion = '9.0'
}

githook {
    hooks {
        "pre-commit" {
            task = "check test"
            shell = "echo pre-commit done!"
        }
        "pre-push" {
            task = "check test"
            shell = "echo pre-push done!"
        }
    }
}